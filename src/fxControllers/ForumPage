package fxControllers;

import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import model.*;
import utils.DbUtils;
import utils.fxUtils;


import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.ResourceBundle;

public class ForumPage implements Initializable {
    @FXML
    public ListView<Forum> forumListView;
    @FXML
    public TreeView<Comment> commentTree;
    @FXML
    public TextArea commentBody;
    @FXML
    public MenuItem addNewTitlesOnForum;
    @FXML
    public MenuItem deleteTitlesOnForum;
    @FXML
    public MenuItem updateTitlesOnForum;
    @FXML
    public ListView<Forum> forumPageView;
    private Comment selectedComment = null;



    public void updateTitlesOnForum() throws SQLException {
        Connection connection = DbUtils.connectToDb();
        Forum selectedForum = (Forum) this.forumPageView.getSelectionModel().getSelectedItem();
        if (selectedForum != null) {
            try {
                String UPDATE_FORUM = "UPDATE forum SET title = ? WHERE id = ?";
                PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_FORUM);
                preparedStatement.setString(1, this.commentBody.getText());
                preparedStatement.setInt(2, selectedForum.getId());
                preparedStatement.executeUpdate();
                DbUtils.disconnect(connection, preparedStatement);
                fxUtils.throwAlert("Updating forum title", " Successfully updated");
                this.forumPageView.setItems(DbUtils.getDataForum());
                System.out.println("lisicaaa");
            } catch (Exception var5) {
                fxUtils.throwAlert("Data format", "Warning");
            }
        }

    }

    public void addNewTitlesOnForum() throws SQLException {
        Connection connection = DbUtils.connectToDb();
        PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO forum(title) VALUES (?)");
        preparedStatement.setString(1, this.commentBody.getText());
        preparedStatement.execute();
        DbUtils.disconnect(connection, preparedStatement);
        this.forumPageView.setItems(DbUtils.getDataForum());
    }

    public void deleteTitlesOnForum() throws SQLException {
        Connection connection = DbUtils.connectToDb();
        Forum selectedForum = (Forum) this.forumPageView.getSelectionModel().getSelectedItem();
        PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM forum WHERE id=?");
        preparedStatement.setInt(1, selectedForum.getId());
        preparedStatement.executeUpdate();
        DbUtils.disconnect(connection, preparedStatement);
        this.forumPageView.setItems(DbUtils.getDataForum());
    }

    public void addComment() {
        Forum selectedForum = (Forum) this.forumPageView.getSelectionModel().getSelectedItem();
        if (selectedForum != null) {
            TreeItem<Comment> selectedCommentTreeItem = this.commentTree.getSelectionModel().getSelectedItem();
            Comment parentComment;
            if (selectedCommentTreeItem != null) {
                parentComment = (Comment) selectedCommentTreeItem.getValue();
                Comment childComment = new Comment(this.commentBody.getText());
                parentComment.addChildComment(childComment);
                selectedCommentTreeItem.getChildren().add(new TreeItem<>(childComment));
            } else {
                parentComment = new Comment(this.commentBody.getText());
                selectedForum.getCommentList().add(parentComment);
                this.refreshCommentTree(selectedForum);
            }

        }
    }

    public void goToComments() {
        Forum selectedForum = (Forum) this.forumPageView.getSelectionModel().getSelectedItem();
        if (selectedForum != null) {
            this.refreshCommentTree(selectedForum);
        }

    }

    public void selectComment() {
        this.selectedComment = (Comment) ((TreeItem) this.commentTree.getSelectionModel().getSelectedItem()).getValue();
    }

    private void refreshCommentTree(Forum forum) {
        if (forum != null) {
            TreeItem<Comment> root = new TreeItem<>(new Comment("Comments for " + forum.getTitle()));
            ObservableList comments = (ObservableList) forum.getCommentList();
            Iterator var4 = comments.iterator();

            while (var4.hasNext()) {
                Comment comment = (Comment) var4.next();
                TreeItem<Comment> commentNode = new TreeItem<>(comment);
                Iterator<Comment> var7 = comment.getReplies().iterator();

                while (var7.hasNext()) {
                    Comment childComment = var7.next();
                    TreeItem<Comment> childCommentNode = new TreeItem<>(childComment);
                    commentNode.getChildren().add(childCommentNode);
                }

                root.getChildren().add(commentNode);
            }

            this.commentTree.setRoot(root);
        }
    }

    public void updateComment() {
        TreeItem<Comment> selectedCommentTreeItem = (TreeItem<Comment>) this.commentTree.getSelectionModel().getSelectedItem();
        if (selectedCommentTreeItem != null) {
            selectedCommentTreeItem.setValue(new Comment(this.commentBody.getText()));
            this.commentTree.refresh();
        }

    }

    public void deleteComment() {
        ObservableList<Integer> selectedCommentIndices = this.commentTree.getSelectionModel().getSelectedIndices();

        for (int i = selectedCommentIndices.size() - 1; i >= 0; --i) {
            int index = (Integer) selectedCommentIndices.get(i);
            TreeItem<Comment> item = this.commentTree.getTreeItem(index);
            if (item != null) {
                if (item.getParent() == null) {
                    this.deleteComment(item);
                } else {
                    item.getParent().getChildren().remove(item);
                }
            }
        }

        this.commentTree.refresh();
    }

    private void deleteComment(TreeItem<Comment> comment) {
        if (comment != null) {
            if (comment.getParent() != null) {
                Iterator<TreeItem<Comment>> var2 = comment.getChildren().iterator();

                while (var2.hasNext()) {
                    TreeItem<Comment> child = var2.next();
                    this.deleteComment(child);
                }

                comment.getParent().getChildren().remove(comment);
            } else {
                this.commentTree.getRoot().getChildren().remove(comment);
            }

            this.commentTree.refresh();
        }
    }

    public void initialize(URL location, ResourceBundle resources) {
        try {
            this.forumPageView.setItems(DbUtils.getDataForum());
        } catch (SQLException var4) {
            throw new RuntimeException(var4);
        }
    }
}
